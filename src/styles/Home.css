.home-container {
  max-width: 100vw;
  max-height: 100vh;
  height: 100vh; /* Esencial para que el contenedor principal defina una altura fija */
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: 100px repeat(4, 1fr);
  grid-column-gap: 0px;
  grid-row-gap: 0px;
}

.barra-superior {
  grid-area: 1 / 1 / 1 / 6;
}
.menu-vertical {
  grid-area: 2 / 1 / 6 / 2;
}

.main-content {
  width: 100%;
  height: 100%; /* El main-content ocupa toda su área asignada en el grid principal */
  grid-area: 2 / 2 / 6 / 6;
  display: flex; /* Cambiamos a flex para manejar el contenido y el footer */
  flex-direction: column; /* Apilamos contenido y footer verticalmente */
}

.main-content__contenido-scrollable {
  /* Este es el div que contendrá el children (tu componente Agendar) */
  flex-grow: 1; /* Permite que ocupe todo el espacio vertical restante dentro de main-content */
  overflow-y: auto; /* ¡Aquí es donde se aplica el scroll! */
  padding: 20px; /* Puedes añadir padding general para todo el contenido de la página aquí */
  box-sizing: border-box; /* Asegura que el padding no cause desbordamiento */
  min-height: 0; /* Necesario para que flex-grow y overflow funcionen correctamente */
}

.footer {
  text-align: center;
  height: 30px; /* El footer tiene una altura fija, no hace scroll */
  display: flex; /* Centramos el texto del footer */
  align-items: center;
  justify-content: center;
  background-color: #f0f0f0; /* Color de fondo opcional para el footer */
  padding: 5px 0; /* Pequeño padding para el footer */
}

/* IMPORTANTE: Los estilos anidados usando '&' no son CSS estándar.
   Si estás usando SASS/LESS, funcionará. Si es CSS puro, debes separarlo: */
/*
.main-content .contenido { // Si solo se aplica a .contenido dentro de .main-content
  width: 100%;
  height: 100%;
}
*/
/* Como .main-content__contenido-scrollable ya tiene flex-grow:1, width:100% y height:100% del antiguo .contenido ya no son necesarios porque el flexbox lo maneja. */
